/*! mss-aframe-kit v1.0.4 */
(function(E,w){typeof exports=="object"&&typeof module<"u"?w(exports):typeof define=="function"&&define.amd?define(["exports"],w):(E=typeof globalThis<"u"?globalThis:E||self,w(E.MSSAFrameKit={}))})(this,function(E){"use strict";function w(t,e,i){const n=document.querySelector("#left-hand"),o=document.querySelector("#right-hand");t==="left"?m(n,e,i):t==="right"?m(o,e,i):t==="both"&&(m(n,e,i),m(o,e,i))}function H(t,e){const i=document.querySelector("#left-hand"),n=document.querySelector("#right-hand");let o=0;e.forEach(r=>{setTimeout(()=>{console.log(`Vibrating ${t} hand for ${r.duration}ms with intensity ${r.intensity}`),t==="left"?m(i,r.duration,r.intensity):t==="right"?m(n,r.duration,r.intensity):t==="both"&&(m(i,r.duration,r.intensity),m(n,r.duration,r.intensity))},o),o+=r.duration})}function m(t,e,i){if(e<=5e3)t.setAttribute("haptics__trigger",`dur: ${e}; force: ${i}`),t.emit("trigger-vibration");else{let r=function(){o>5e3?(t.setAttribute("haptics__trigger",`dur: 5000; force: ${i}`),t.emit("trigger-vibration"),o-=5e3,setTimeout(r,5e3)):(t.setAttribute("haptics__trigger",`dur: ${o}; force: ${i}`),t.emit("trigger-vibration"))},o=e;r()}}const x=Object.freeze(Object.defineProperty({__proto__:null,initVibration:m,triggerHapticPattern:H,triggerHaptics:w},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("arm-swing-movement",{schema:{enabled:{type:"boolean",default:!0},leftController:{type:"selector",default:'[oculus-touch-controls*="hand: left"], [oculus-touch-controls*="hand:left"], [meta-touch-controls*="hand: left"], [meta-touch-controls*="hand:left"]'},rightController:{type:"selector",default:'[oculus-touch-controls*="hand: right"], [oculus-touch-controls*="hand:right"], [meta-touch-controls*="hand: right"], [meta-touch-controls*="hand:right"]'},speedFactor:{type:"number",default:1},smoothingTime:{type:"number",default:500},minSpeed:{type:"number",default:null},maxSpeed:{type:"number",default:null},swingTimeout:{type:"number",default:700},avgDirectionSampleInterval:{type:"number",default:100},avgDirectionBufferSize:{type:"number",default:20},reverseButtonEvent:{type:"string",default:""},reverseButtonHand:{type:"string",default:""},debug:{type:"boolean",default:!1},soundEntity:{type:"selector",default:""},soundVolume:{type:"number",default:1},oneStepPlaybackRate:{type:"number",default:1}},init:function(){if(!this.data.enabled)return;this.controllerArrows=[];const t=this.createControllerArrow("left"),e=this.createControllerArrow("right");if(t&&this.controllerArrows.push(t),e&&this.controllerArrows.push(e),this.avgArrow=this.createAvgDirectionArrow(),this.samples=[],this.timeSinceLastSample=0,this.reverseHeld=!1,this.data.reverseButtonEvent){const i=this.data.reverseButtonEvent,n=i.replace(/(?:down|start)$/,r=>r==="down"?"up":"end");let o;this.data.reverseButtonHand==="left"?o=this.data.leftController:this.data.reverseButtonHand==="right"?o=this.data.rightController:o=this.el,o.addEventListener(i,()=>{this.reverseHeld=!0}),o.addEventListener(n,()=>{this.reverseHeld=!1})}this.audioEl=this.data.soundEntity||null,this.audioEl&&(this.audioEl.volume=this.data.soundVolume),this.hands={left:{entity:this.data.leftController,lastZ:null,lastDirection:null,lastSwingTime:null,recentSwings:[]},right:{entity:this.data.rightController,lastZ:null,lastDirection:null,lastSwingTime:null,recentSwings:[]}},this.currentSpeed=0,this.swingDetectThreshold=.01,this.moving=!1},tick:function(t,e){if(!this.data.enabled)return;this.timeSinceLastSample+=e,this.timeSinceLastSample>=this.data.avgDirectionSampleInterval&&(this.timeSinceLastSample-=this.data.avgDirectionSampleInterval,this.updateDirection());for(let d in this.hands){let s=this.hands[d];if(!s.entity)continue;let h=new THREE.Vector3;s.entity.object3D.getWorldPosition(h);let y;if(this.el.avgDirectionVec){let a=new THREE.Vector3;this.el.object3D.getWorldPosition(a),y=h.clone().sub(a).dot(this.el.avgDirectionVec)}else y=this.el.object3D.worldToLocal(h.clone()).z;if(s.lastZ===null){s.lastZ=y;continue}let f=y-s.lastZ,u=s.lastDirection;if(f>this.swingDetectThreshold?u="positive":f<-this.swingDetectThreshold&&(u="negative"),s.lastDirection&&u&&u!==s.lastDirection){if(s.lastSwingTime!==null){let a=t-s.lastSwingTime;a>150&&(s.recentSwings.push(a),s.recentSwings.length>6&&s.recentSwings.shift())}s.lastSwingTime=t}s.lastDirection=u,s.lastZ=y}for(let d in this.hands){let s=this.hands[d];s.lastSwingTime!==null&&t-s.lastSwingTime>this.data.swingTimeout&&(s.recentSwings=[],s.lastSwingTime=null,s.lastDirection=null)}let i=[];for(let d in this.hands)i=i.concat(this.hands[d].recentSwings);const n=i.length;if(i=i.filter(d=>d>0),n<10){let d=10-n;for(let s=0;s<d;s++)i.push(800)}let o=0;o=i.reduce((d,s)=>d+s,0)/i.length;let r=0;const l=1e3/o;o>0&&(r=3.45*l-3.95,r*=this.data.speedFactor,this.data.maxSpeed?r=Math.min(r,this.data.maxSpeed):r=Math.min(r,10*this.data.speedFactor));const c=this.data.minSpeed||.6*this.data.speedFactor;if(r<c?(r=0,this.moving=!1):this.moving=!0,this.currentSpeed+=(r-this.currentSpeed)*(e/this.data.smoothingTime),this.currentSpeed=Math.max(0,this.currentSpeed),this.audioEl&&(this.audioEl.playbackRate=this.data.oneStepPlaybackRate*l,this.moving?this.audioEl.paused&&this.audioEl.play():this.audioEl.paused||this.audioEl.pause()),this.data.debug){const d=i.map(s=>Math.round(s)).join(", ");console.log(`Steps/sec: ${l.toFixed(1)}, Target m/s: ${r.toFixed(1)}, Current m/s: ${this.currentSpeed.toFixed(1)}, avgSwingTime: ${o.toFixed(1)}, recentSwings: [${d}]`)}let S=this.currentSpeed*(e/1e3),b=new THREE.Vector3;this.el.avgDirectionVec?b.copy(this.el.avgDirectionVec).negate():(this.el.object3D.getWorldDirection(b),b.negate());let p=this.el.components["movement-controls"],_=this.el.sceneEl.systems.nav;if(p&&p.data.constrainToNavMesh&&_){let d=this.el.object3D.position.clone(),s=d.clone().add(b.clone().multiplyScalar(S)),h=p.navGroup||_.getGroup(d),y=p.navNode||_.getNode(d,h),f=new THREE.Vector3,u=_.clampStep(d,s,h,y,f);this.el.object3D.position.copy(f),p.navGroup=h,p.navNode=u}else this.el.object3D.position.add(b.multiplyScalar(S))},createControllerArrow:function(t){const e=this.el.querySelector(`#${t}-hand`);if(!e)return null;const i=document.createElement("a-entity");return i.setAttribute("class","controller-arrow"),i.setAttribute("position","0 -0.083 -0.167"),i.setAttribute("rotation","-30 0 0"),i.innerHTML=`
            <a-cylinder color="#400040" height="0.5" radius="0.01" position="0 0 0" rotation="-90 0 0"></a-cylinder>
            <a-cone color="#400040" height="0.2" radius-bottom="0.05" radius-top="0" position="0 0 -0.2" rotation="-90 0 0"></a-cone>
        `,e.appendChild(i),this.data.debug||i.setAttribute("visible",!1),i},createAvgDirectionArrow:function(){const t=document.createElement("a-entity");return t.setAttribute("class","avg-arrow"),t.setAttribute("position","0 1 -0.7"),t.setAttribute("rotation","0 0 0"),t.innerHTML=`
            <a-cylinder color="#FFA500" height="0.3" radius="0.02" position="0 0 0" rotation="-90 0 0"></a-cylinder>
            <a-cone color="#FFA500" height="0.2" radius-bottom="0.05" radius-top="0" position="0 0 -0.25" rotation="-90 0 0"></a-cone>
        `,this.el.appendChild(t),this.data.debug||t.setAttribute("visible",!1),t},updateDirection:function(){const t=[];for(const l of this.controllerArrows){if(!l)continue;const c=new THREE.Vector3;l.object3D.getWorldDirection(c),c.y=0,c.normalize(),t.push(c)}if(t.length===0)return;let e=t.reduce((l,c)=>l.add(c),new THREE.Vector3).divideScalar(t.length).normalize();this.reverseHeld&&e.negate(),this.samples.push(e.clone()),this.samples.length>this.data.avgDirectionBufferSize&&this.samples.shift();const i=this.samples.reduce((l,c)=>l.add(c),new THREE.Vector3).divideScalar(this.samples.length),n=Math.atan2(i.x,i.z)*(180/Math.PI),o=this.el.object3D.rotation.y*(180/Math.PI),r=n-o;this.avgArrow.setAttribute("rotation",{x:0,y:r,z:0}),this.el.avgDirectionYaw=n,this.el.avgDirectionVec=i.clone()}});const j=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("delayed-dynamic-body",{schema:{delay:{type:"number",default:2e3}},init:function(){const t=this.el.sceneEl,e=()=>{setTimeout(()=>{this.el.setAttribute("dynamic-body","")},this.data.delay)};t.hasLoaded?e():t.addEventListener("loaded",e)}});const R=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("holdable",{schema:{position:{type:"vec3",default:{x:0,y:0,z:0}},rotation:{type:"vec3",default:{x:0,y:0,z:0}}},init:function(){this.isHeld=!1,this.holdingHand=null,this.originalParent=this.el.parentElement,this.savedPhysics=[],this.savedSleepy=null,this.sleepyTimerActive=!1,this.previousHandPosition=null,this.handVelocity=new THREE.Vector3,this.rayActive=!1,this.insideMesh={},this.insideTestRaycaster=new THREE.Raycaster,this.insideTestRaycaster.far=10,this.onGripDown=this.onGripDown.bind(this),this.onGripUp=this.onGripUp.bind(this),this.onHitStart=this.onHitStart.bind(this),this.onHitEnd=this.onHitEnd.bind(this),this.el.addEventListener("raycaster-intersected",this.onHitStart),this.el.addEventListener("raycaster-intersected-cleared",this.onHitEnd),this.physicsDriver=this.el.sceneEl.getAttribute("physics"),this.el.classList.contains("interactable")||this.el.classList.add("interactable")},tick:function(t,e){if(this.isHeld&&this.holdingHand){const i=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3);if(this.previousHandPosition){const n=i.clone().sub(this.previousHandPosition).multiplyScalar(1e3/e);this.handVelocity.copy(n)}this.previousHandPosition=i.clone()}},onHitStart:function(t){const e=t.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");e&&(this.isHeld||(this.rayActive=!0,this.holdingHand=e,this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp),this.holdingHand.addEventListener("gripdown",this.onGripDown),this.holdingHand.addEventListener("gripup",this.onGripUp)))},onHitEnd:function(t){const e=t.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(!e)return;const i=e.getAttribute("id")||e.object3D.uuid,n=e.object3D.getWorldPosition(new THREE.Vector3),o=new THREE.Vector3;e.object3D.getWorldDirection(o),this.insideTestRaycaster.set(n,o.normalize());const l=this.insideTestRaycaster.intersectObject(this.el.object3D,!0).length%2===1;this.insideMesh[i]=l,!this.insideMesh[i]&&!(this.isHeld&&e===this.holdingHand)&&(e.removeEventListener("gripdown",this.onGripDown),e.removeEventListener("gripup",this.onGripUp)),this.rayActive=!1},onGripDown:function(t){const e=this.el.hasAttribute("holdable-dynamic-body"),i=Object.keys(this.el.components).some(a=>a.includes("shape__"));if(this.isHeld)return;const n=t.target.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(!n)return;if(this.holdingHand=n,this.el.hasAttribute("dynamic-body"))this.savedPhysics=[{type:"dynamic-body",config:this.el.getAttribute("dynamic-body")}],this.el.removeAttribute("dynamic-body");else if(this.el.hasAttribute("ammo-body"))this.savedPhysics=[{type:"ammo-body",config:this.el.getAttribute("ammo-body")}],this.el.removeAttribute("ammo-body");else if(this.el.hasAttribute("body")||e&&i){const a=this.el.getAttribute("body"),v=e&&i?"dynamic":a?a.type:"dynamic",A=a?a.shape:"auto",D=a?a.mass:5,z=a?a.linearDamping:"0.01",$=a?a.angularDamping:"0.01",O=a?a.sphereRadius:"",G=a?a.cylinderAxis:"";this.savedPhysics=[],v==="dynamic"&&(this.savedPhysics=[{type:"body",config:{type:v,shape:A,mass:D,linearDamping:z,angularDamping:$,sphereRadius:O,cylinderAxis:G}}],this.el.removeAttribute("body"));const k=this.el.components;for(const g in k)if(g.includes("shape__")){let T=g;if(!T.match(/\d+$/))T+="100";else{const Q=parseInt(T.match(/\d+$/)[0]);T=T.replace(/\d+$/,Q+100)}const q=this.el.getAttribute(g).shape,W=this.el.getAttribute(g).offset,B=this.el.getAttribute(g).orientation,N=this.el.getAttribute(g).radius,I=this.el.getAttribute(g).halfExtents,U=this.el.getAttribute(g).radiusTop,Z=this.el.getAttribute(g).radiusBottom,K=this.el.getAttribute(g).height,Y=this.el.getAttribute(g).numSegments;this.savedPhysics.push({type:T,config:{shape:q,offset:W,orientation:B,radius:N,halfExtents:I,radiusTop:U,radiusBottom:Z,height:K,numSegments:Y}})}this.el.hasAttribute("sleepy")&&(this.savedSleepy=this.el.getAttribute("sleepy"),this.el.removeAttribute("sleepy"))}this.isHeld=!0,this.previousHandPosition=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3),this.handVelocity.set(0,0,0);const o=this.holdingHand.object3D,l=(this.holdingHand.getAttribute("meta-touch-controls")||this.holdingHand.getAttribute("oculus-touch-controls")||this.holdingHand.getAttribute("hand-controls")||{}).hand||"right";o.updateMatrixWorld(!0),this.el.object3D.updateMatrixWorld(!0);const c=this.el.object3D.matrixWorld.clone(),S=new THREE.Matrix4().copy(o.matrixWorld).invert(),b=new THREE.Matrix4().multiplyMatrices(S,c),p=new THREE.Vector3,_=new THREE.Quaternion,d=new THREE.Vector3;b.decompose(p,_,d);let s,h=!1,y=!1;if(this.data.position.x!==0||this.data.position.y!==0||this.data.position.z!==0)s=new THREE.Vector3(this.data.position.x,this.data.position.y,this.data.position.z),s.x=l==="left"?-s.x:s.x,h=!0;else{const a=this.el.sceneEl.getAttribute("data-grab-position");a?(s=new THREE.Vector3().copy(AFRAME.utils.coordinates.parse(a)),s.x=l==="left"?-s.x:s.x,h=!0,y=!0):(s=p,h=!1)}let f;if(this.data.rotation.x!==0||this.data.rotation.y!==0||this.data.rotation.z!==0){let a=l==="left"?-this.data.rotation.y:this.data.rotation.y,v=l==="left"?-this.data.rotation.z:this.data.rotation.z;const A=new THREE.Euler(THREE.MathUtils.degToRad(this.data.rotation.x),THREE.MathUtils.degToRad(a),THREE.MathUtils.degToRad(v));f=new THREE.Quaternion().setFromEuler(A)}else f=_;let u;if(h){let a;if(y)a=new THREE.Box3().setFromObject(this.el.object3D).getSize(new THREE.Vector3);else{const A=this.el.object3D.clone();A.quaternion.copy(f),A.updateMatrixWorld(!0),a=new THREE.Box3().setFromObject(A).getSize(new THREE.Vector3)}const v=new THREE.Vector3;l==="left"?v.set(-a.x/2,-a.y/2,a.z/2):v.set(a.x/2,-a.y/2,a.z/2),u=s.clone().sub(v)}else u=p;o.attach(this.el.object3D),this.el.object3D.position.copy(u),this.el.object3D.quaternion.copy(f),this.el.object3D.updateMatrixWorld(!0)},onGripUp:function(t){if(!this.isHeld||!this.holdingHand)return;if(this.el.object3D.updateMatrixWorld(!0),this.originalParent.object3D.attach(this.el.object3D),this.el.object3D.updateMatrixWorld(!0),this.savedPhysics&&(this.savedPhysics.forEach(o=>{this.el.setAttribute(o.type,o.config)}),this.savedPhysics=null),this.savedSleepy&&(this.sleepyTimerId?clearTimeout(this.sleepyTimerId):this.sleepyTimerActive=!0,this.sleepyTimerId=setTimeout(()=>{this.el.setAttribute("sleepy",`allowSleep: true; speedLimit: ${this.savedSleepy.speedLimit}; delay: ${this.savedSleepy.delay}; angularDamping: ${this.savedSleepy.angularDamping}; linearDamping: ${this.savedSleepy.linearDamping}; holdState: ${this.savedSleepy.holdState};`),this.savedSleepy=null,this.sleepyTimerActive=!1,this.sleepyTimerId=null},4e3)),this.el.hasAttribute("holdable-dynamic-body")&&!this.el.hasAttribute("body")){this.el.hasAttribute("static-body")&&this.el.removeAttribute("static-body");const o=this.el.getAttribute("holdable-dynamic-body");this.el.setAttribute("dynamic-body",o)}this.isHeld=!1,setTimeout(()=>{if(this.el.body&&this.handVelocity){let o=this.handVelocity.clone().multiplyScalar(1.5);o.y+=1,this.physicsDriver.driver==="local"?this.el.body.velocity.set(o.x,o.y,o.z):this.physicsDriver.driver==="ammo"&&this.el.body.setLinearVelocity(new Ammo.btVector3(o.x,o.y,o.z))}},50);const e=document.querySelectorAll("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");e&&e.forEach(o=>{const l=(o.getAttribute("meta-touch-controls")||o.getAttribute("oculus-touch-controls")||o.getAttribute("hand-controls")||{}).hand||"right",c=o.querySelector("[raycaster]"),S=c==null?void 0:c.getAttribute("raycaster");if(S&&typeof S.far=="number"&&!c.getAttribute(`data-tempFar-active-${l}`)){c.setAttribute(`data-tempFar-active-${l}`,"true");const b=S.far;c.setAttribute("raycaster","far: 0"),setTimeout(()=>{c.setAttribute("raycaster",`far: ${b}`),c.removeAttribute(`data-tempFar-active-${l}`)},50)}});const i=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3);new THREE.Box3().setFromObject(this.el.object3D).containsPoint(i)||(this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp),this.holdingHand=null)},remove:function(){this.el.removeEventListener("raycaster-intersected",this.onHitStart),this.el.removeEventListener("raycaster-intersected-cleared",this.onHitEnd),this.holdingHand&&(this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp))}});const P=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("music-player",{schema:{songs:{type:"array",default:[]}},init:function(){const t=this.el.sceneEl,e=document.querySelector("#left-hand");if(!e){console.error("No #left-hand controller found for music-player");return}if(e.addEventListener("xbuttonup",()=>this.togglePause()),e.addEventListener("ybuttonup",()=>this.nextTrack()),document.addEventListener("keyup",i=>{i.code==="Space"?this.togglePause():i.code==="KeyN"&&this.nextTrack()}),this.data.songs.length===0){let i=localStorage.getItem("musicPlayerSongs");if(i)try{let n=JSON.parse(i);Array.isArray(n)&&n.length>0&&(this.data.songs=n)}catch(n){console.warn("Error parsing musicPlayerSongs from localStorage",n)}}if(this.data.songs.length===0){console.warn("No songs found for music-player");return}this.currentPlaylist=this.shuffle(this.data.songs.slice()),this.audio=new Audio,this.audio.addEventListener("ended",()=>{this.playNextSong()}),this.audio.addEventListener("error",i=>{console.error("Error loading song: "+this.currentSong,i),this.playNextSong()}),this.boundStartPlayback=this.startPlayback.bind(this),document.addEventListener("click",this.boundStartPlayback,{once:!0}),t.addEventListener("enter-vr",()=>{AFRAME.utils.device.checkHeadsetConnected()&&(console.log("VR entered, starting music playback"),this.boundStartPlayback(),document.removeEventListener("click",this.boundStartPlayback))})},startPlayback:function(){this.playNextSong()},playNextSong:function(){this.currentPlaylist.length===0&&(this.currentPlaylist=this.shuffle(this.data.songs.slice()),console.log("Playlist resetting"));let t=this.currentPlaylist.pop();t=t.trim(),t.startsWith("'")&&(t=t.slice(1)),t.endsWith("'")&&(t=t.slice(0,-1)),this.currentSong=t,console.log("Playing: "+t),this.audio.src="assets/audio/music/"+encodeURI(t),this.audio.play()},togglePause:function(){this.audio.paused?this.audio.play():this.audio.pause()},nextTrack:function(){this.playNextSong()},shuffle:function(t){for(let e=t.length-1;e>0;e--){let i=Math.floor(Math.random()*(e+1));[t[e],t[i]]=[t[i],t[e]]}return t}});const M=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("raycaster-listener",{init:function(){console.log("Raycaster Listener initialized");const t=this.el,e="#ffffff",i=document.querySelectorAll(".styled-ray"),n=document.querySelector("#reticle");t.addEventListener("raycaster-intersected",function(o){i.forEach(function(l){l.setAttribute("material","color","#A2F5A2")}),n&&n.setAttribute("geometry","radius",".008");const r=o.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(r){const c=(r.getAttribute("meta-touch-controls")||r.getAttribute("oculus-touch-controls")||r.getAttribute("hand-controls")||{}).hand||"right";w(c,150,.1)}}),t.addEventListener("raycaster-intersected-cleared",function(){i.forEach(function(o){o.setAttribute("material","color",e)}),n&&n.setAttribute("geometry","radius",".005")})}});const L=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("raycaster-manager",{init:function(){console.log("Raycaster Manager initialized");const t=document.querySelector("#left-hand"),e=document.querySelector("#right-hand");t&&e&&(t.addEventListener("triggerdown",()=>this.toggleRaycaster("left")),e.addEventListener("triggerdown",()=>this.toggleRaycaster("right")))},toggleRaycaster:function(t){const e=document.querySelector(`#${t}-hand .actual-ray`);e.getAttribute("raycaster").enabled?(console.log("Raycaster already active on this controller:",t),e.components.raycaster.intersectedEls.length||(console.log("No intersection detected. Disabling raycaster on:",t),this.disableRaycaster(t))):(console.log("Enabling raycaster on:",t),this.enableRaycaster(t))},disableRaycaster:function(t){const e=document.querySelector(`#${t}-hand .styled-ray`),i=document.querySelector(`#${t}-hand .actual-ray`);e==null||e.setAttribute("visible",!1),i==null||i.setAttribute("raycaster","enabled",!1)},enableRaycaster:function(t){const e=document.querySelector(`#${t}-hand .styled-ray`),i=document.querySelector(`#${t}-hand .actual-ray`);e==null||e.setAttribute("visible",!0),i==null||i.setAttribute("raycaster",{enabled:!0}),e&&this.playSound(e);const n=t==="left"?"right":"left";this.disableRaycaster(n)},playSound:function(t){let e=t.components.sound;e&&e.playSound()}});const V=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("refresh-raycaster-on-model-load",{init:function(){const t=document.querySelectorAll("[gltf-model]");let e=Array.from(t).filter(o=>{var r,l;return(l=(r=o.components)==null?void 0:r["gltf-model"])==null?void 0:l.model}).length;const i=t.length,n=()=>{e===i&&document.querySelectorAll("[raycaster]").forEach(o=>{o.components.raycaster.refreshObjects()})};n(),t.forEach(o=>{o.addEventListener("model-loaded",()=>{e++,n()})})}});const C=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("vr-logger",{schema:{maxMessages:{type:"int",default:5}},init:function(){const t=localStorage.getItem("enableVrLogger");if(!t||t!=="true"){console.log("VR Logger is disabled.");return}this.messages=[],this.el.setAttribute("text",{color:"white",width:3,wrapCount:45,align:"left"});const e=console.log;console.log=(...i)=>{e(...i),this.addMessage(i.map(n=>n.toString()).join(" "))}},addMessage:function(t){this.messages.length>=this.data.maxMessages&&this.messages.shift(),this.messages.push(t+`
`),this.updateText()},updateText:function(){this.el.setAttribute("text","value",this.messages.join(`
`))}});const F=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("vr-mode-detect",{init:function(){const t=this.el.sceneEl,e=document.getElementById("reticle");t==null||t.addEventListener("enter-vr",function(){AFRAME.utils.device.checkHeadsetConnected()&&(e==null||e.setAttribute("visible","false"),e==null||e.setAttribute("raycaster","enabled",!1))}),t==null||t.addEventListener("exit-vr",function(){e==null||e.setAttribute("visible","true"),e==null||e.setAttribute("raycaster","enabled",!0)})}}),console.log("MSS A-Frame Kit Loaded",Object.assign({"./components/_helpers/helpers.js":x,"./components/arm-swing-movement/arm-swing-movement.js":j,"./components/delayed-dynamic-body/delayed-dynamic-body.js":R,"./components/holdable/holdable.js":P,"./components/music-player/music-player.js":M,"./components/raycaster-listener/raycaster-listener.js":L,"./components/raycaster-manager/raycaster-manager.js":V,"./components/refresh-raycaster-on-model-load/refresh-raycaster-on-model-load.js":C,"./components/vr-logger/vr-logger.js":F,"./components/vr-mode-detect/vr-mode-detect.js":Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}))})),E.initVibration=m,E.triggerHapticPattern=H,E.triggerHaptics=w,Object.defineProperty(E,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=mss-aframe-kit.min.js.map
