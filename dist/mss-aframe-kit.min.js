/*! mss-aframe-kit v0.1.0 */
(function(g){typeof define=="function"&&define.amd?define(g):g()})(function(){"use strict";function g(e,t,o){const n=document.querySelector("#left-hand"),i=document.querySelector("#right-hand");e==="left"?h(n,t,o):e==="right"?h(i,t,o):e==="both"&&(h(n,t,o),h(i,t,o))}function T(e,t){const o=document.querySelector("#left-hand"),n=document.querySelector("#right-hand");let i=0;t.forEach(r=>{setTimeout(()=>{console.log(`Vibrating ${e} hand for ${r.duration}ms with intensity ${r.intensity}`),e==="left"?h(o,r.duration,r.intensity):e==="right"?h(n,r.duration,r.intensity):e==="both"&&(h(o,r.duration,r.intensity),h(n,r.duration,r.intensity))},i),i+=r.duration})}function h(e,t,o){if(t<=5e3)e.setAttribute("haptics__trigger",`dur: ${t}; force: ${o}`),e.emit("trigger-vibration");else{let r=function(){i>5e3?(e.setAttribute("haptics__trigger",`dur: 5000; force: ${o}`),e.emit("trigger-vibration"),i-=5e3,setTimeout(r,5e3)):(e.setAttribute("haptics__trigger",`dur: ${i}; force: ${o}`),e.emit("trigger-vibration"))},i=t;r()}}const D=Object.freeze(Object.defineProperty({__proto__:null,initVibration:h,triggerHapticPattern:T,triggerHaptics:g},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("delayed-dynamic-body",{schema:{delay:{type:"number",default:2e3}},init:function(){const e=this.el.sceneEl,t=()=>{setTimeout(()=>{this.el.setAttribute("dynamic-body","")},this.data.delay)};e.hasLoaded?t():e.addEventListener("loaded",t)}});const R=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("holdable",{schema:{position:{type:"vec3",default:{x:0,y:0,z:0}},rotation:{type:"vec3",default:{x:0,y:0,z:0}}},init:function(){this.isHeld=!1,this.holdingHand=null,this.originalParent=this.el.parentElement,this.savedPhysics=[],this.savedSleepy=null,this.sleepyTimerActive=!1,this.previousHandPosition=null,this.handVelocity=new THREE.Vector3,this.rayActive=!1,this.insideMesh={},this.insideTestRaycaster=new THREE.Raycaster,this.insideTestRaycaster.far=10,this.onGripDown=this.onGripDown.bind(this),this.onGripUp=this.onGripUp.bind(this),this.onHitStart=this.onHitStart.bind(this),this.onHitEnd=this.onHitEnd.bind(this),this.el.addEventListener("raycaster-intersected",this.onHitStart),this.el.addEventListener("raycaster-intersected-cleared",this.onHitEnd),this.physicsDriver=this.el.sceneEl.getAttribute("physics"),this.el.classList.contains("interactable")||this.el.classList.add("interactable")},tick:function(e,t){if(this.isHeld&&this.holdingHand){const o=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3);if(this.previousHandPosition){const n=o.clone().sub(this.previousHandPosition).multiplyScalar(1e3/t);this.handVelocity.copy(n)}this.previousHandPosition=o.clone()}},onHitStart:function(e){const t=e.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");t&&(this.isHeld||(this.rayActive=!0,this.holdingHand=t,this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp),this.holdingHand.addEventListener("gripdown",this.onGripDown),this.holdingHand.addEventListener("gripup",this.onGripUp)))},onHitEnd:function(e){const t=e.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(!t)return;const o=t.getAttribute("id")||t.object3D.uuid,n=t.object3D.getWorldPosition(new THREE.Vector3),i=new THREE.Vector3;t.object3D.getWorldDirection(i),this.insideTestRaycaster.set(n,i.normalize());const a=this.insideTestRaycaster.intersectObject(this.el.object3D,!0).length%2===1;this.insideMesh[o]=a,!this.insideMesh[o]&&!(this.isHeld&&t===this.holdingHand)&&(t.removeEventListener("gripdown",this.onGripDown),t.removeEventListener("gripup",this.onGripUp)),this.rayActive=!1},onGripDown:function(e){const t=this.el.hasAttribute("holdable-dynamic-body"),o=Object.keys(this.el.components).some(s=>s.includes("shape__"));if(this.isHeld)return;const n=e.target.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(!n)return;if(this.holdingHand=n,this.el.hasAttribute("dynamic-body"))this.savedPhysics=[{type:"dynamic-body",config:this.el.getAttribute("dynamic-body")}],this.el.removeAttribute("dynamic-body");else if(this.el.hasAttribute("ammo-body"))this.savedPhysics=[{type:"ammo-body",config:this.el.getAttribute("ammo-body")}],this.el.removeAttribute("ammo-body");else if(this.el.hasAttribute("body")||t&&o){const s=this.el.getAttribute("body"),u=t&&o?"dynamic":s?s.type:"dynamic",y=s?s.shape:"auto",S=s?s.mass:5,O=s?s.linearDamping:"0.01",V=s?s.angularDamping:"0.01",$=s?s.sphereRadius:"",z=s?s.cylinderAxis:"";this.savedPhysics=[],u==="dynamic"&&(this.savedPhysics=[{type:"body",config:{type:u,shape:y,mass:S,linearDamping:O,angularDamping:V,sphereRadius:$,cylinderAxis:z}}],this.el.removeAttribute("body"));const G=this.el.components;for(const c in G)if(c.includes("shape__")){let b=c;if(!b.match(/\d+$/))b+="100";else{const N=parseInt(b.match(/\d+$/)[0]);b=b.replace(/\d+$/,N+100)}const q=this.el.getAttribute(c).shape,C=this.el.getAttribute(c).offset,F=this.el.getAttribute(c).orientation,W=this.el.getAttribute(c).radius,U=this.el.getAttribute(c).halfExtents,B=this.el.getAttribute(c).radiusTop,I=this.el.getAttribute(c).radiusBottom,k=this.el.getAttribute(c).height,Q=this.el.getAttribute(c).numSegments;this.savedPhysics.push({type:b,config:{shape:q,offset:C,orientation:F,radius:W,halfExtents:U,radiusTop:B,radiusBottom:I,height:k,numSegments:Q}})}this.el.hasAttribute("sleepy")&&(this.savedSleepy=this.el.getAttribute("sleepy"),this.el.removeAttribute("sleepy"))}this.isHeld=!0,this.previousHandPosition=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3),this.handVelocity.set(0,0,0);const i=this.holdingHand.object3D,a=(this.holdingHand.getAttribute("meta-touch-controls")||this.holdingHand.getAttribute("oculus-touch-controls")||this.holdingHand.getAttribute("hand-controls")||{}).hand||"right";i.updateMatrixWorld(!0),this.el.object3D.updateMatrixWorld(!0);const l=this.el.object3D.matrixWorld.clone(),m=new THREE.Matrix4().copy(i.matrixWorld).invert(),v=new THREE.Matrix4().multiplyMatrices(m,l),A=new THREE.Vector3,_=new THREE.Quaternion,P=new THREE.Vector3;v.decompose(A,_,P);let d,p=!1,H=!1;if(this.data.position.x!==0||this.data.position.y!==0||this.data.position.z!==0)d=new THREE.Vector3(this.data.position.x,this.data.position.y,this.data.position.z),d.x=a==="left"?-d.x:d.x,p=!0;else{const s=this.el.sceneEl.getAttribute("data-grab-position");s?(d=new THREE.Vector3().copy(AFRAME.utils.coordinates.parse(s)),d.x=a==="left"?-d.x:d.x,p=!0,H=!0):(d=A,p=!1)}let f;if(this.data.rotation.x!==0||this.data.rotation.y!==0||this.data.rotation.z!==0){let s=a==="left"?-this.data.rotation.y:this.data.rotation.y,u=a==="left"?-this.data.rotation.z:this.data.rotation.z;const y=new THREE.Euler(THREE.MathUtils.degToRad(this.data.rotation.x),THREE.MathUtils.degToRad(s),THREE.MathUtils.degToRad(u));f=new THREE.Quaternion().setFromEuler(y)}else f=_;let E;if(p){let s;if(H)s=new THREE.Box3().setFromObject(this.el.object3D).getSize(new THREE.Vector3);else{const y=this.el.object3D.clone();y.quaternion.copy(f),y.updateMatrixWorld(!0),s=new THREE.Box3().setFromObject(y).getSize(new THREE.Vector3)}const u=new THREE.Vector3;a==="left"?u.set(-s.x/2,-s.y/2,s.z/2):u.set(s.x/2,-s.y/2,s.z/2),E=d.clone().sub(u)}else E=A;i.attach(this.el.object3D),this.el.object3D.position.copy(E),this.el.object3D.quaternion.copy(f),this.el.object3D.updateMatrixWorld(!0)},onGripUp:function(e){if(!this.isHeld||!this.holdingHand)return;if(this.el.object3D.updateMatrixWorld(!0),this.originalParent.object3D.attach(this.el.object3D),this.el.object3D.updateMatrixWorld(!0),this.savedPhysics&&(this.savedPhysics.forEach(i=>{this.el.setAttribute(i.type,i.config)}),this.savedPhysics=null),this.savedSleepy&&(this.sleepyTimerId?clearTimeout(this.sleepyTimerId):this.sleepyTimerActive=!0,this.sleepyTimerId=setTimeout(()=>{this.el.setAttribute("sleepy",`allowSleep: true; speedLimit: ${this.savedSleepy.speedLimit}; delay: ${this.savedSleepy.delay}; angularDamping: ${this.savedSleepy.angularDamping}; linearDamping: ${this.savedSleepy.linearDamping}; holdState: ${this.savedSleepy.holdState};`),this.savedSleepy=null,this.sleepyTimerActive=!1,this.sleepyTimerId=null},4e3)),this.el.hasAttribute("holdable-dynamic-body")&&!this.el.hasAttribute("body")){this.el.hasAttribute("static-body")&&this.el.removeAttribute("static-body");const i=this.el.getAttribute("holdable-dynamic-body");this.el.setAttribute("dynamic-body",i)}this.isHeld=!1,setTimeout(()=>{if(this.el.body&&this.handVelocity){let i=this.handVelocity.clone().multiplyScalar(1.5);i.y+=1,this.physicsDriver.driver==="local"?this.el.body.velocity.set(i.x,i.y,i.z):this.physicsDriver.driver==="ammo"&&this.el.body.setLinearVelocity(new Ammo.btVector3(i.x,i.y,i.z))}},50);const t=document.querySelectorAll("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");t&&t.forEach(i=>{const a=(i.getAttribute("meta-touch-controls")||i.getAttribute("oculus-touch-controls")||i.getAttribute("hand-controls")||{}).hand||"right",l=i.querySelector("[raycaster]"),m=l==null?void 0:l.getAttribute("raycaster");if(m&&typeof m.far=="number"&&!l.getAttribute(`data-tempFar-active-${a}`)){l.setAttribute(`data-tempFar-active-${a}`,"true");const v=m.far;l.setAttribute("raycaster","far: 0"),setTimeout(()=>{l.setAttribute("raycaster",`far: ${v}`),l.removeAttribute(`data-tempFar-active-${a}`)},50)}});const o=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3);new THREE.Box3().setFromObject(this.el.object3D).containsPoint(o)||(this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp),this.holdingHand=null)},remove:function(){this.el.removeEventListener("raycaster-intersected",this.onHitStart),this.el.removeEventListener("raycaster-intersected-cleared",this.onHitEnd),this.holdingHand&&(this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp))}});const j=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("raycaster-listener",{init:function(){console.log("Raycaster Listener initialized");const e=this.el,t="#ffffff",o=document.querySelectorAll(".styled-ray"),n=document.querySelector("#reticle");e.addEventListener("raycaster-intersected",function(i){o.forEach(function(a){a.setAttribute("material","color","#A2F5A2")}),n&&n.setAttribute("geometry","radius",".008");const r=i.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(r){const l=(r.getAttribute("meta-touch-controls")||r.getAttribute("oculus-touch-controls")||r.getAttribute("hand-controls")||{}).hand||"right";g(l,150,.1)}}),e.addEventListener("raycaster-intersected-cleared",function(){o.forEach(function(i){i.setAttribute("material","color",t)}),n&&n.setAttribute("geometry","radius",".005")})}});const x=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("raycaster-manager",{init:function(){console.log("Raycaster Manager initialized");const e=document.querySelector("#left-hand"),t=document.querySelector("#right-hand");e&&t&&(e.addEventListener("triggerdown",()=>this.toggleRaycaster("left")),t.addEventListener("triggerdown",()=>this.toggleRaycaster("right")))},toggleRaycaster:function(e){const t=document.querySelector(`#${e}-hand .actual-ray`);t.getAttribute("raycaster").enabled?(console.log("Raycaster already active on this controller:",e),t.components.raycaster.intersectedEls.length||(console.log("No intersection detected. Disabling raycaster on:",e),this.disableRaycaster(e))):(console.log("Enabling raycaster on:",e),this.enableRaycaster(e))},disableRaycaster:function(e){const t=document.querySelector(`#${e}-hand .styled-ray`),o=document.querySelector(`#${e}-hand .actual-ray`);t==null||t.setAttribute("visible",!1),o==null||o.setAttribute("raycaster","enabled",!1)},enableRaycaster:function(e){const t=document.querySelector(`#${e}-hand .styled-ray`),o=document.querySelector(`#${e}-hand .actual-ray`);t==null||t.setAttribute("visible",!0),o==null||o.setAttribute("raycaster",{enabled:!0}),t&&this.playSound(t);const n=e==="left"?"right":"left";this.disableRaycaster(n)},playSound:function(e){let t=e.components.sound;t&&t.playSound()}});const w=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("refresh-raycaster-on-model-load",{init:function(){const e=document.querySelectorAll("[gltf-model]");let t=Array.from(e).filter(i=>{var r,a;return(a=(r=i.components)==null?void 0:r["gltf-model"])==null?void 0:a.model}).length;const o=e.length,n=()=>{t===o&&document.querySelectorAll("[raycaster]").forEach(i=>{i.components.raycaster.refreshObjects()})};n(),e.forEach(i=>{i.addEventListener("model-loaded",()=>{t++,n()})})}});const M=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("",{schema:{maxMessages:{type:"int",default:5}},init:function(){const e=localStorage.getItem("enableVrLogger");if(!e||e!=="true"){console.log("VR Logger is disabled.");return}this.messages=[],this.el.setAttribute("text",{color:"black",width:3,wrapCount:45,align:"left"});const t=console.log;console.log=(...o)=>{t(...o),this.addMessage(o.map(n=>n.toString()).join(" "))}},addMessage:function(e){this.messages.length>=this.data.maxMessages&&this.messages.shift(),this.messages.push(e+`
`),this.updateText()},updateText:function(){this.el.setAttribute("text","value",this.messages.join(`
`))}});const L=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("vr-mode-detect",{init:function(){const e=this.el.sceneEl,t=document.getElementById("reticle");e==null||e.addEventListener("enter-vr",function(){AFRAME.utils.device.checkHeadsetConnected()&&(t==null||t.setAttribute("visible","false"),t==null||t.setAttribute("raycaster","enabled",!1))}),e==null||e.addEventListener("exit-vr",function(){t==null||t.setAttribute("visible","true"),t==null||t.setAttribute("raycaster","enabled",!0)})}}),console.log("MSS A-Frame Kit Loaded",Object.assign({"./components/_helpers/helpers.js":D,"./components/delayed-dynamic-body/delayed-dynamic-body.js":R,"./components/holdable/holdable.js":j,"./components/raycaster-listener/raycaster-listener.js":x,"./components/raycaster-manager/raycaster-manager.js":w,"./components/refresh-raycaster-on-model-load/refresh-raycaster-on-model-load.js":M,"./components/vr-logger/vr-logger.js":L,"./components/vr-mode-detect/vr-mode-detect.js":Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}))}))});
//# sourceMappingURL=mss-aframe-kit.min.js.map
