/*! mss-aframe-kit v2.1.0 */
(function(T,w){typeof exports=="object"&&typeof module<"u"?w(exports):typeof define=="function"&&define.amd?define(["exports"],w):(T=typeof globalThis<"u"?globalThis:T||self,w(T.MSSAFrameKit={}))})(this,function(T){"use strict";function w(t,e,i){const n=document.querySelector("#left-hand"),s=document.querySelector("#right-hand");t==="left"?b(n,e,i):t==="right"?b(s,e,i):t==="both"&&(b(n,e,i),b(s,e,i))}function P(t,e){const i=document.querySelector("#left-hand"),n=document.querySelector("#right-hand");let s=0;e.forEach(r=>{setTimeout(()=>{console.log(`Vibrating ${t} hand for ${r.duration}ms with intensity ${r.intensity}`),t==="left"?b(i,r.duration,r.intensity):t==="right"?b(n,r.duration,r.intensity):t==="both"&&(b(i,r.duration,r.intensity),b(n,r.duration,r.intensity))},s),s+=r.duration})}function b(t,e,i){if(e<=5e3)t.setAttribute("haptics__trigger",`dur: ${e}; force: ${i}`),t.emit("trigger-vibration");else{let r=function(){s>5e3?(t.setAttribute("haptics__trigger",`dur: 5000; force: ${i}`),t.emit("trigger-vibration"),s-=5e3,setTimeout(r,5e3)):(t.setAttribute("haptics__trigger",`dur: ${s}; force: ${i}`),t.emit("trigger-vibration"))},s=e;r()}}const M=Object.freeze(Object.defineProperty({__proto__:null,initVibration:b,triggerHapticPattern:P,triggerHaptics:w},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("arm-swing-movement",{schema:{enabled:{type:"boolean",default:!0},leftController:{type:"selector",default:'[oculus-touch-controls*="hand: left"], [oculus-touch-controls*="hand:left"], [meta-touch-controls*="hand: left"], [meta-touch-controls*="hand:left"], [hand-controls*="hand: left"], [hand-controls*="hand:left"]'},rightController:{type:"selector",default:'[oculus-touch-controls*="hand: right"], [oculus-touch-controls*="hand:right"], [meta-touch-controls*="hand: right"], [meta-touch-controls*="hand:right"], [hand-controls*="hand: right"], [hand-controls*="hand:right"]'},speedFactor:{type:"number",default:1},smoothingTime:{type:"number",default:500},minSpeed:{type:"number",default:null},maxSpeed:{type:"number",default:null},swingTimeout:{type:"number",default:700},avgDirectionSampleInterval:{type:"number",default:100},avgDirectionBufferSize:{type:"number",default:20},reverseButtonEvent:{type:"string",default:""},reverseButtonHand:{type:"string",default:""},debug:{type:"boolean",default:!1},soundEntity:{type:"selector",default:""},soundVolume:{type:"number",default:1},oneStepPlaybackRate:{type:"number",default:1}},init:function(){if(!this.data.enabled)return;this.controllerArrows=[];const t=this.createControllerArrow("left"),e=this.createControllerArrow("right");if(t&&this.controllerArrows.push(t),e&&this.controllerArrows.push(e),this.avgArrow=this.createAvgDirectionArrow(),this.samples=[],this.timeSinceLastSample=0,this.reverseHeld=!1,this.data.reverseButtonEvent){const i=this.data.reverseButtonEvent,n=i.replace(/(?:down|start)$/,r=>r==="down"?"up":"end");let s;this.data.reverseButtonHand==="left"?s=this.data.leftController:this.data.reverseButtonHand==="right"?s=this.data.rightController:s=this.el,s.addEventListener(i,()=>{this.reverseHeld=!0}),s.addEventListener(n,()=>{this.reverseHeld=!1})}this.audioEl=this.data.soundEntity||null,this.audioEl&&(this.audioEl.volume=this.data.soundVolume),this.hands={left:{entity:this.data.leftController,lastZ:null,lastDirection:null,lastSwingTime:null,recentSwings:[]},right:{entity:this.data.rightController,lastZ:null,lastDirection:null,lastSwingTime:null,recentSwings:[]}},this.currentSpeed=0,this.swingDetectThreshold=.01,this.moving=!1},tick:function(t,e){if(!this.data.enabled)return;this.timeSinceLastSample+=e,this.timeSinceLastSample>=this.data.avgDirectionSampleInterval&&(this.timeSinceLastSample-=this.data.avgDirectionSampleInterval,this.updateDirection());for(let d in this.hands){let a=this.hands[d];if(!a.entity)continue;let f=new THREE.Vector3;a.entity.object3D.getWorldPosition(f);let S;if(this.el.avgDirectionVec){let l=new THREE.Vector3;this.el.object3D.getWorldPosition(l),S=f.clone().sub(l).dot(this.el.avgDirectionVec)}else S=this.el.object3D.worldToLocal(f.clone()).z;if(a.lastZ===null){a.lastZ=S;continue}let E=S-a.lastZ,p=a.lastDirection;if(E>this.swingDetectThreshold?p="positive":E<-this.swingDetectThreshold&&(p="negative"),a.lastDirection&&p&&p!==a.lastDirection){if(a.lastSwingTime!==null){let l=t-a.lastSwingTime;l>150&&(a.recentSwings.push(l),a.recentSwings.length>6&&a.recentSwings.shift())}a.lastSwingTime=t}a.lastDirection=p,a.lastZ=S}for(let d in this.hands){let a=this.hands[d];a.lastSwingTime!==null&&t-a.lastSwingTime>this.data.swingTimeout&&(a.recentSwings=[],a.lastSwingTime=null,a.lastDirection=null)}let i=[];for(let d in this.hands)i=i.concat(this.hands[d].recentSwings);const n=i.length;if(i=i.filter(d=>d>0),n<10){let d=10-n;for(let a=0;a<d;a++)i.push(800)}let s=0;s=i.reduce((d,a)=>d+a,0)/i.length;let r=0;const o=1e3/s;s>0&&(r=3.45*o-3.95,r*=this.data.speedFactor,this.data.maxSpeed?r=Math.min(r,this.data.maxSpeed):r=Math.min(r,10*this.data.speedFactor));const c=this.data.minSpeed||.6*this.data.speedFactor;if(r<c?(r=0,this.moving=!1):this.moving=!0,this.currentSpeed+=(r-this.currentSpeed)*(e/this.data.smoothingTime),this.currentSpeed=Math.max(0,this.currentSpeed),this.audioEl&&(this.audioEl.playbackRate=this.data.oneStepPlaybackRate*o,this.moving?this.audioEl.paused&&this.audioEl.play():this.audioEl.paused||this.audioEl.pause()),this.data.debug){const d=i.map(a=>Math.round(a)).join(", ");console.log(`Steps/sec: ${o.toFixed(1)}, Target m/s: ${r.toFixed(1)}, Current m/s: ${this.currentSpeed.toFixed(1)}, avgSwingTime: ${s.toFixed(1)}, recentSwings: [${d}]`)}let u=this.currentSpeed*(e/1e3),g=new THREE.Vector3;this.el.avgDirectionVec?g.copy(this.el.avgDirectionVec).negate():(this.el.object3D.getWorldDirection(g),g.negate());let h=this.el.components["movement-controls"],v=this.el.sceneEl.systems.nav;if(h&&h.data.constrainToNavMesh&&v){let d=this.el.object3D.position.clone(),a=d.clone().add(g.clone().multiplyScalar(u)),f=h.navGroup||v.getGroup(d),S=h.navNode||v.getNode(d,f),E=new THREE.Vector3,p=v.clampStep(d,a,f,S,E);this.el.object3D.position.copy(E),h.navGroup=f,h.navNode=p}else this.el.object3D.position.add(g.multiplyScalar(u))},createControllerArrow:function(t){const e=this.el.querySelector(`#${t}-hand`);if(!e)return null;const i=document.createElement("a-entity");return i.setAttribute("class","controller-arrow"),i.setAttribute("position","0 -0.083 -0.167"),i.setAttribute("rotation","-30 0 0"),i.innerHTML=`
            <a-cylinder color="#400040" height="0.5" radius="0.01" position="0 0 0" rotation="-90 0 0"></a-cylinder>
            <a-cone color="#400040" height="0.2" radius-bottom="0.05" radius-top="0" position="0 0 -0.2" rotation="-90 0 0"></a-cone>
        `,e.appendChild(i),this.data.debug||i.setAttribute("visible",!1),i},createAvgDirectionArrow:function(){const t=document.createElement("a-entity");return t.setAttribute("class","avg-arrow"),t.setAttribute("position","0 1 -0.7"),t.setAttribute("rotation","0 0 0"),t.innerHTML=`
            <a-cylinder color="#FFA500" height="0.3" radius="0.02" position="0 0 0" rotation="-90 0 0"></a-cylinder>
            <a-cone color="#FFA500" height="0.2" radius-bottom="0.05" radius-top="0" position="0 0 -0.25" rotation="-90 0 0"></a-cone>
        `,this.el.appendChild(t),this.data.debug||t.setAttribute("visible",!1),t},updateDirection:function(){const t=[];for(const o of this.controllerArrows){if(!o)continue;const c=new THREE.Vector3;o.object3D.getWorldDirection(c),c.y=0,c.normalize(),t.push(c)}if(t.length===0)return;let e=t.reduce((o,c)=>o.add(c),new THREE.Vector3).divideScalar(t.length).normalize();this.reverseHeld&&e.negate(),this.samples.push(e.clone()),this.samples.length>this.data.avgDirectionBufferSize&&this.samples.shift();const i=this.samples.reduce((o,c)=>o.add(c),new THREE.Vector3).divideScalar(this.samples.length),n=Math.atan2(i.x,i.z)*(180/Math.PI),s=this.el.object3D.rotation.y*(180/Math.PI),r=n-s;this.avgArrow.setAttribute("rotation",{x:0,y:r,z:0}),this.el.avgDirectionYaw=n,this.el.avgDirectionVec=i.clone()}});const j=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("holdable",{schema:{position:{type:"vec3",default:{x:0,y:0,z:0}},rotation:{type:"vec3",default:{x:0,y:0,z:0}},leftHandRotationInvert:{type:"array",default:["y","z"]},debug:{type:"boolean",default:!1}},init:function(){this.isHeld=!1,this.holdingHand=null,this.originalParent=this.el.parentElement,this.savedPhysics=[],this.savedSleepy=null,this.sleepyTimerActive=!1,this.previousHandPosition=null,this.handVelocity=new THREE.Vector3,this.rayActive=!1,this.insideMesh={},this.insideTestRaycaster=new THREE.Raycaster,this.insideTestRaycaster.far=10,this.savedComponentStates={},this.gripModifiers={},this.releaseModifiers={},this.scanModifierAttributes(),this.onGripDown=this.onGripDown.bind(this),this.onGripUp=this.onGripUp.bind(this),this.onHitStart=this.onHitStart.bind(this),this.onHitEnd=this.onHitEnd.bind(this),this.el.addEventListener("raycaster-intersected",this.onHitStart),this.el.addEventListener("raycaster-intersected-cleared",this.onHitEnd),this.physicsDriver=this.el.sceneEl.getAttribute("physics");let t="interactable";const e=this.el.sceneEl.getAttribute("data-holdable-intersection-class");e&&(t=e),this.el.classList.contains(t)||this.el.classList.add(t)},scanModifierAttributes:function(){const t=this.el.getAttributeNames();for(let e of t)if(e.startsWith("holdable-grip-")){const i=e.substring(14),n=this.el.getAttribute(e),s=this.parseAttributeString(n);this.gripModifiers[i]=s}else if(e.startsWith("holdable-release-")){const i=e.substring(17),n=this.el.getAttribute(e),s=this.parseAttributeString(n);this.releaseModifiers[i]=s}},parseAttributeString:function(t){if(!t||t.trim()==="")return{__is_flag:!0};if(t.indexOf(":")===-1)return{__direct_value:t.trim()};const e={},i=t.split(";");for(let n of i){if(!n.trim())continue;const s=n.indexOf(":");if(s===-1)continue;const r=n.substring(0,s).trim();let o=n.substring(s+1).trim();o==="true"?o=!0:o==="false"?o=!1:!isNaN(parseFloat(o))&&isFinite(o)&&(o=parseFloat(o)),e[r]=o}return e},applyComponentModifications:function(t,e,i=!1){if(!(!e||Object.keys(e).length===0))if(i&&!this.savedComponentStates[t]&&(this.el.hasAttribute(t)?this.savedComponentStates[t]=AFRAME.utils.clone(this.el.getAttribute(t)):this.savedComponentStates[t]=null),e.__is_flag)this.el.setAttribute(t,"");else if(e.__direct_value)this.el.setAttribute(t,e.__direct_value);else for(const n in e)this.el.setAttribute(t,n,e[n])},restoreComponentState:function(t){if(t in this.savedComponentStates){const e=this.savedComponentStates[t];e===null?this.el.removeAttribute(t):this.el.setAttribute(t,e)}},tick:function(t,e){if(this.isHeld&&this.holdingHand){const i=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3);if(this.previousHandPosition){const n=i.clone().sub(this.previousHandPosition).multiplyScalar(1e3/e);this.handVelocity.copy(n)}this.previousHandPosition=i.clone()}},onHitStart:function(t){const e=t.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");e&&(this.isHeld||(this.el.emit("hit-start",{hand:e,entity:this.el}),this.rayActive=!0,this.holdingHand=e,this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp),this.holdingHand.addEventListener("gripdown",this.onGripDown),this.holdingHand.addEventListener("gripup",this.onGripUp)))},onHitEnd:function(t){const e=t.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(!e)return;this.el.emit("hit-end",{hand:e,entity:this.el});const i=e.getAttribute("id")||e.object3D.uuid,n=e.object3D.getWorldPosition(new THREE.Vector3),s=new THREE.Vector3;e.object3D.getWorldDirection(s),this.insideTestRaycaster.set(n,s.normalize());const o=this.insideTestRaycaster.intersectObject(this.el.object3D,!0).length%2===1;this.insideMesh[i]=o,!this.insideMesh[i]&&!(this.isHeld&&e===this.holdingHand)&&(e.removeEventListener("gripdown",this.onGripDown),e.removeEventListener("gripup",this.onGripUp)),this.rayActive=!1},onGripDown:function(t){const e=this.el.hasAttribute("holdable-dynamic-body"),i=Object.keys(this.el.components).some(l=>l.includes("shape__"));if(this.isHeld)return;const n=t.target.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(!n)return;this.el.emit("grip-down",{hand:n,entity:this.el});for(const l in this.gripModifiers)this.applyComponentModifications(l,this.gripModifiers[l],!0);if(this.holdingHand=n,this.el.hasAttribute("dynamic-body"))this.savedPhysics=[{type:"dynamic-body",config:this.el.getAttribute("dynamic-body")}],this.el.removeAttribute("dynamic-body");else if(this.el.hasAttribute("ammo-body"))this.savedPhysics=[{type:"ammo-body",config:this.el.getAttribute("ammo-body")}],this.el.removeAttribute("ammo-body");else if(this.el.hasAttribute("body")||e&&i){const l=this.el.getAttribute("body"),y=e&&i?"dynamic":l?l.type:"dynamic",A=l?l.shape:"auto",_=l?l.mass:5,H=l?l.linearDamping:"0.01",x=l?l.angularDamping:"0.01",R=l?l.sphereRadius:"",$=l?l.cylinderAxis:"";this.savedPhysics=[],y==="dynamic"&&(this.savedPhysics=[{type:"body",config:{type:y,shape:A,mass:_,linearDamping:H,angularDamping:x,sphereRadius:R,cylinderAxis:$}}],this.el.removeAttribute("body"));const k=this.el.components;for(const m in k)if(m.includes("shape__")){let D=m;if(!D.match(/\d+$/))D+="100";else{const Y=parseInt(D.match(/\d+$/)[0]);D=D.replace(/\d+$/,Y+100)}const q=this.el.getAttribute(m).shape,G=this.el.getAttribute(m).offset,B=this.el.getAttribute(m).orientation,I=this.el.getAttribute(m).radius,W=this.el.getAttribute(m).halfExtents,N=this.el.getAttribute(m).radiusTop,U=this.el.getAttribute(m).radiusBottom,K=this.el.getAttribute(m).height,Z=this.el.getAttribute(m).numSegments;this.savedPhysics.push({type:D,config:{shape:q,offset:G,orientation:B,radius:I,halfExtents:W,radiusTop:N,radiusBottom:U,height:K,numSegments:Z}})}this.el.hasAttribute("sleepy")&&(this.savedSleepy=this.el.getAttribute("sleepy"),this.el.removeAttribute("sleepy"))}this.isHeld=!0,this.previousHandPosition=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3),this.handVelocity.set(0,0,0);const s=this.holdingHand.object3D,o=(this.holdingHand.getAttribute("meta-touch-controls")||this.holdingHand.getAttribute("oculus-touch-controls")||this.holdingHand.getAttribute("hand-controls")||{}).hand||"right";s.updateMatrixWorld(!0),this.el.object3D.updateMatrixWorld(!0);const c=this.el.object3D.matrixWorld.clone(),u=new THREE.Matrix4().copy(s.matrixWorld).invert(),g=new THREE.Matrix4().multiplyMatrices(u,c),h=new THREE.Vector3,v=new THREE.Quaternion,d=new THREE.Vector3;g.decompose(h,v,d);let a,f=!1,S=!1;if(this.data.position.x!==0||this.data.position.y!==0||this.data.position.z!==0)a=new THREE.Vector3(this.data.position.x,this.data.position.y,this.data.position.z),a.x=o==="left"?-a.x:a.x,f=!0;else{const l=this.el.sceneEl.getAttribute("data-holdable-grab-position");l?(a=new THREE.Vector3().copy(AFRAME.utils.coordinates.parse(l)),a.x=o==="left"?-a.x:a.x,f=!0,S=!0):(a=h,f=!1,this.data.debug&&(o==="left"?console.log("Use right hand to get position and rotation values. The left hand automatically mirrors the right."):this.generateDebugGrabAttributes(h,v,o)))}let E;if(this.data.rotation.x!==0||this.data.rotation.y!==0||this.data.rotation.z!==0){let l=this.data.rotation.x,y=this.data.rotation.y,A=this.data.rotation.z;o==="left"&&(this.data.leftHandRotationInvert.includes("x")&&(l=-l),this.data.leftHandRotationInvert.includes("y")&&(y=-y),this.data.leftHandRotationInvert.includes("z")&&(A=-A));const _=new THREE.Euler(THREE.MathUtils.degToRad(l),THREE.MathUtils.degToRad(y),THREE.MathUtils.degToRad(A),"YXZ"),H=this.el.object3D.position.clone(),x=this.el.object3D.quaternion.clone(),R=new THREE.Quaternion().setFromEuler(_);this.el.object3D.quaternion.copy(R),E=this.el.object3D.quaternion.clone(),this.el.object3D.position.copy(H),this.el.object3D.quaternion.copy(x)}else E=v;let p;if(f){let l;if(S)l=new THREE.Box3().setFromObject(this.el.object3D).getSize(new THREE.Vector3);else{const A=this.el.object3D.clone();A.quaternion.copy(E),A.updateMatrixWorld(!0),l=new THREE.Box3().setFromObject(A).getSize(new THREE.Vector3)}const y=new THREE.Vector3;o==="left"?y.set(-l.x/2,-l.y/2,l.z/2):y.set(l.x/2,-l.y/2,l.z/2),p=a.clone().sub(y)}else p=h;s.attach(this.el.object3D),this.el.object3D.position.copy(p),this.el.object3D.quaternion.copy(E),this.el.object3D.updateMatrixWorld(!0)},generateDebugGrabAttributes:function(t,e){const i=new THREE.Euler().setFromQuaternion(e,"YXZ"),n=THREE.MathUtils.radToDeg(i.x);let s=THREE.MathUtils.radToDeg(i.y),r=THREE.MathUtils.radToDeg(i.z);const o=this.el.object3D.clone();o.quaternion.copy(e),o.updateMatrixWorld(!0);const u=new THREE.Box3().setFromObject(o).getSize(new THREE.Vector3),g=new THREE.Vector3;let h;g.set(u.x/2,-u.y/2,u.z/2),h=t.clone().add(g);const v=h.x.toFixed(3)+" "+h.y.toFixed(3)+" "+h.z.toFixed(3),d=n.toFixed(1)+" "+s.toFixed(1)+" "+r.toFixed(1);console.log('holdable="position: '+v+"; rotation: "+d+'"')},onGripUp:function(t){if(!this.isHeld||!this.holdingHand)return;if(this.el.object3D.updateMatrixWorld(!0),this.originalParent.object3D.attach(this.el.object3D),this.el.object3D.updateMatrixWorld(!0),this.savedPhysics&&(this.savedPhysics.forEach(s=>{this.el.setAttribute(s.type,s.config)}),this.savedPhysics=null),this.savedSleepy&&(this.sleepyTimerId?clearTimeout(this.sleepyTimerId):this.sleepyTimerActive=!0,this.sleepyTimerId=setTimeout(()=>{this.el.setAttribute("sleepy",`allowSleep: true; speedLimit: ${this.savedSleepy.speedLimit}; delay: ${this.savedSleepy.delay}; angularDamping: ${this.savedSleepy.angularDamping}; linearDamping: ${this.savedSleepy.linearDamping}; holdState: ${this.savedSleepy.holdState};`),this.savedSleepy=null,this.sleepyTimerActive=!1,this.sleepyTimerId=null},4e3)),this.el.hasAttribute("holdable-dynamic-body")&&!this.el.hasAttribute("body")){this.el.hasAttribute("static-body")&&this.el.removeAttribute("static-body");const s=this.el.getAttribute("holdable-dynamic-body");this.el.setAttribute("dynamic-body",s)}this.isHeld=!1,setTimeout(()=>{if(this.el.body&&this.handVelocity){let s=this.handVelocity.clone().multiplyScalar(1.5);s.y+=1,this.physicsDriver.driver==="local"?this.el.body.velocity.set(s.x,s.y,s.z):this.physicsDriver.driver==="ammo"&&this.el.body.setLinearVelocity(new Ammo.btVector3(s.x,s.y,s.z))}},50);for(const s in this.releaseModifiers)this.applyComponentModifications(s,this.releaseModifiers[s],!1);for(const s in this.savedComponentStates)s in this.releaseModifiers||this.restoreComponentState(s);this.savedComponentStates={},this.el.emit("grip-up",{hand:this.holdingHand,entity:this.el});const e=document.querySelectorAll("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");e&&e.forEach(s=>{const o=(s.getAttribute("meta-touch-controls")||s.getAttribute("oculus-touch-controls")||s.getAttribute("hand-controls")||{}).hand||"right",c=s.querySelector("[raycaster]"),u=c==null?void 0:c.getAttribute("raycaster");if(u&&typeof u.far=="number"&&!c.getAttribute(`data-tempFar-active-${o}`)){c.setAttribute(`data-tempFar-active-${o}`,"true");const g=u.far;c.setAttribute("raycaster","far: 0"),setTimeout(()=>{c.setAttribute("raycaster",`far: ${g}`),c.removeAttribute(`data-tempFar-active-${o}`)},50)}});const i=this.holdingHand.object3D.getWorldPosition(new THREE.Vector3);new THREE.Box3().setFromObject(this.el.object3D).containsPoint(i)||(this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp),this.holdingHand=null)},remove:function(){this.el.removeEventListener("raycaster-intersected",this.onHitStart),this.el.removeEventListener("raycaster-intersected-cleared",this.onHitEnd),this.holdingHand&&(this.holdingHand.removeEventListener("gripdown",this.onGripDown),this.holdingHand.removeEventListener("gripup",this.onGripUp))}});const L=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("music-player",{schema:{songs:{type:"array",default:[]},playOrder:{type:"string",default:"shuffle"},loopMode:{type:"string",default:"maintain"},audioDirectory:{type:"string",default:"assets/audio/music/"},controlsEnabled:{type:"boolean",default:!0},togglePauseSelector:{type:"string",default:"#left-hand"},togglePauseBtn:{type:"string",default:"xbuttonup"},togglePauseKey:{type:"string",default:"Space"},nextTrackSelector:{type:"string",default:"#left-hand"},nextTrackBtn:{type:"string",default:"ybuttonup"},nextTrackKey:{type:"string",default:"KeyN"}},init:function(){const t=this.el.sceneEl;if(this.data.controlsEnabled&&(this.setupControllerListeners(),this.setupKeyboardListeners()),this.data.songs.length===0){let e=localStorage.getItem("musicPlayerSongs");if(e)try{let i=JSON.parse(e);Array.isArray(i)&&i.length>0&&(this.data.songs=i)}catch(i){console.warn("Error parsing musicPlayerSongs from localStorage",i)}}if(this.data.songs.length===0){console.warn("No songs found for music-player");return}this.currentPlaylist=this.generatePlaylist(this.data.songs.slice()),this.originalPlaylist=this.currentPlaylist.slice(),this.audio=new Audio,this.audio.addEventListener("ended",()=>{this.playNextSong()}),this.audio.addEventListener("error",e=>{console.error("Error loading song: "+this.currentSong,e),this.playNextSong()}),this.boundStartPlayback=this.startPlayback.bind(this),document.addEventListener("click",this.boundStartPlayback,{once:!0}),t.addEventListener("enter-vr",()=>{AFRAME.utils.device.checkHeadsetConnected()&&(console.log("VR entered, starting music playback"),this.boundStartPlayback(),document.removeEventListener("click",this.boundStartPlayback))})},startPlayback:function(){this.playNextSong()},playNextSong:function(){if(this.currentPlaylist.length===0){if(this.data.loopMode==="disable")return;this.data.loopMode==="shuffle"?this.currentPlaylist=this.shuffle(this.data.songs.slice()):this.data.loopMode==="maintain"?this.currentPlaylist=this.originalPlaylist.slice():(console.warn(`Unexpected loopMode: "${this.data.loopMode}". Defaulting to "maintain".`),this.currentPlaylist=this.originalPlaylist.slice())}let t=this.currentPlaylist.pop();t=t.trim(),t.startsWith("'")&&(t=t.slice(1)),t.endsWith("'")&&(t=t.slice(0,-1)),this.currentSong=t,console.log("Playing: "+t),this.audio.src=this.data.audioDirectory+encodeURI(t),this.audio.play()},togglePause:function(){this.audio.paused?this.audio.play():this.audio.pause()},nextTrack:function(){this.playNextSong()},shuffle:function(t){for(let e=t.length-1;e>0;e--){let i=Math.floor(Math.random()*(e+1));[t[e],t[i]]=[t[i],t[e]]}return t},generatePlaylist:function(t){switch(this.data.playOrder){case"alphabetical":return t.sort().reverse();case"listed":return t.reverse();case"shuffle":default:return this.shuffle(t)}},setupControllerListeners:function(){const t=document.querySelector(this.data.togglePauseSelector);t?t.addEventListener(this.data.togglePauseBtn,()=>this.togglePause()):console.warn("Controller not found:",this.data.togglePauseSelector);const e=document.querySelector(this.data.nextTrackSelector);e?e.addEventListener(this.data.nextTrackBtn,()=>this.nextTrack()):console.warn("Controller not found:",this.data.nextTrackSelector)},setupKeyboardListeners:function(){document.addEventListener("keyup",t=>{t.code===this.data.togglePauseKey?this.togglePause():t.code===this.data.nextTrackKey&&this.nextTrack()})}});const C=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("post-model-load-refresh",{schema:{refreshRaycasters:{type:"boolean",default:!0},refreshPhysics:{type:"boolean",default:!0}},init:function(){const t=()=>{s===r&&(this.data.refreshRaycasters&&e(),this.data.refreshPhysics&&i())},e=()=>{document.querySelectorAll("[raycaster]").forEach(o=>{o.components.raycaster.refreshObjects()})},i=()=>{document.querySelectorAll("[delayed-dynamic-body]").forEach(o=>{const c=o.getAttribute("delayed-dynamic-body");o.removeAttribute("delayed-dynamic-body"),o.setAttribute("dynamic-body",c)}),document.querySelectorAll("[delayed-static-body]").forEach(o=>{const c=o.getAttribute("delayed-static-body");o.removeAttribute("delayed-static-body"),o.setAttribute("static-body",c)})},n=document.querySelectorAll("[gltf-model]:not(a-mixin)");let s=Array.from(n).filter(o=>{var c,u;return(u=(c=o.components)==null?void 0:c["gltf-model"])==null?void 0:u.model}).length;const r=n.length;t(),n.forEach(o=>{o.addEventListener("model-loaded",()=>{s++,t()})}),setTimeout(()=>{s<r&&(console.warn(`Not all models loaded after 5 seconds (${s}/${r}). Forcing refresh anyway.`),this.data.refreshRaycasters&&e(),this.data.refreshPhysics&&i())},5e3)}});const F=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("raycaster-listener",{init:function(){console.log("Raycaster Listener initialized");const t=this.el,e="#ffffff",i=document.querySelectorAll(".styled-ray"),n=document.querySelector("#reticle");t.addEventListener("raycaster-intersected",function(s){i.forEach(function(o){o.setAttribute("material","color","#A2F5A2")}),n&&n.setAttribute("geometry","radius",".008");const r=s.detail.el.closest("[meta-touch-controls], [oculus-touch-controls], [hand-controls]");if(r){const c=(r.getAttribute("meta-touch-controls")||r.getAttribute("oculus-touch-controls")||r.getAttribute("hand-controls")||{}).hand||"right";w(c,150,.1)}}),t.addEventListener("raycaster-intersected-cleared",function(){i.forEach(function(s){s.setAttribute("material","color",e)}),n&&n.setAttribute("geometry","radius",".005")})}});const V=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("raycaster-manager",{init:function(){console.log("Raycaster Manager initialized");const t=document.querySelector("#left-hand"),e=document.querySelector("#right-hand");t&&e&&(t.addEventListener("triggerdown",()=>this.toggleRaycaster("left")),e.addEventListener("triggerdown",()=>this.toggleRaycaster("right")))},toggleRaycaster:function(t){const e=document.querySelector(`#${t}-hand .actual-ray`);e.getAttribute("raycaster").enabled?(console.log("Raycaster already active on this controller:",t),e.components.raycaster.intersectedEls.length||(console.log("No intersection detected. Disabling raycaster on:",t),this.disableRaycaster(t))):(console.log("Enabling raycaster on:",t),this.enableRaycaster(t))},disableRaycaster:function(t){const e=document.querySelector(`#${t}-hand .styled-ray`),i=document.querySelector(`#${t}-hand .actual-ray`);e==null||e.setAttribute("visible",!1),i==null||i.setAttribute("raycaster","enabled",!1)},enableRaycaster:function(t){const e=document.querySelector(`#${t}-hand .styled-ray`),i=document.querySelector(`#${t}-hand .actual-ray`);e==null||e.setAttribute("visible",!0),i==null||i.setAttribute("raycaster",{enabled:!0}),e&&this.playSound(e);const n=t==="left"?"right":"left";this.disableRaycaster(n)},playSound:function(t){let e=t.components.sound;e&&e.playSound()}});const z=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("vr-logger",{schema:{maxMessages:{type:"int",default:5}},init:function(){const t=localStorage.getItem("enableVrLogger");if(!t||t!=="true"){console.log("VR Logger is disabled.");return}this.messages=[],this.el.setAttribute("text",{color:"white",width:3,wrapCount:45,align:"left"});const e=console.log;console.log=(...i)=>{e(...i),this.addMessage(i.map(n=>n===null?"null":n===void 0?"undefined":n.toString()).join(" "))}},addMessage:function(t){this.messages.length>=this.data.maxMessages&&this.messages.shift(),this.messages.push(t+`
`),this.updateText()},updateText:function(){this.el.setAttribute("text","value",this.messages.join(`
`))}});const O=Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}));AFRAME.registerComponent("vr-mode-detect",{init:function(){const t=this.el.sceneEl,e=document.getElementById("reticle");t==null||t.addEventListener("enter-vr",function(){AFRAME.utils.device.checkHeadsetConnected()&&(e==null||e.setAttribute("visible","false"),e==null||e.setAttribute("raycaster","enabled",!1))}),t==null||t.addEventListener("exit-vr",function(){e==null||e.setAttribute("visible","true"),e==null||e.setAttribute("raycaster","enabled",!0)})}}),console.log("MSS A-Frame Kit Loaded",Object.assign({"./components/_helpers/helpers.js":M,"./components/arm-swing-movement/arm-swing-movement.js":j,"./components/holdable/holdable.js":L,"./components/music-player/music-player.js":C,"./components/post-model-load-refresh/post-model-load-refresh.js":F,"./components/raycaster-listener/raycaster-listener.js":V,"./components/raycaster-manager/raycaster-manager.js":z,"./components/vr-logger/vr-logger.js":O,"./components/vr-mode-detect/vr-mode-detect.js":Object.freeze(Object.defineProperty({__proto__:null},Symbol.toStringTag,{value:"Module"}))})),T.initVibration=b,T.triggerHapticPattern=P,T.triggerHaptics=w,Object.defineProperty(T,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=mss-aframe-kit.min.js.map
